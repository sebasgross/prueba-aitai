{"version":3,"sources":["components/Index.js","components/ProductForm.js","components/ProductAll.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Index","react_default","a","createElement","className","ProductForm","state","product","eventHandler","e","_this","target","name","value","setState","console","log","sendToServer","axios","post","withCredentials","crossDomain","then","props","history","push","catch","index_es","onChange","this","type","placeholder","min","max","variant","onClick","component","Component","ProductList","products","_this2","get","p","data","length","map","index","key","quantity","Routes","react_router","exact","path","App","react_router_dom","to","withRouter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c1b0ed68.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default function Index(){\n  return(\n    <div className=\"index-page\">\n      <h1> Escoge lo que quieras</h1>\n    </div>\n  )\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\n// import { withStyles } from '@material-ui/core/styles';\nimport {Input,Button} from '@material-ui/core'\n\n\n\nclass ProductForm extends Component{\n    state={\n        product:{}\n    }\n    eventHandler=(e)=>{\n        let {product} = this.state\n        product[e.target.name] = e.target.value\n\n        this.setState({ product })\n        console.log(product)\n    }\n    sendToServer=()=>{\n        let {product} = this.state\n        let url = \"https://prueba-aitai.herokuapp.com/product/create\"\n\n        axios.post(url,product, {withCredentials:false},{ crossDomain: true})\n        .then(()=>{\n            // console.log(user)\n            this.props.history.push('/product/all')\n        })\n        .catch(e=>console.log(e))\n\n    }\n    render(){\n        // const {product}= this.state\n    \n        return(\n            <div className=\"main-container\">\n            <div className=\"main-card\">\n                <Input className=\"inputs\" onChange={this.eventHandler} name=\"name\" type=\"text\" placeholder=\"Name of Product\">\n                </Input>\n\n\n\n                <Input className=\"inputs\" onChange ={this.eventHandler} name=\"quantity\" type=\"number\" min=\"0\" max=\"100\" placeholder=\"How Many Units\">\n                </Input>\n                <Button variant=\"contained\" onClick={this.sendToServer} component=\"span\" >\n                    Upload\n                    </Button>\n                \n            </div>\n            </div>\n        )\n    }\n}\n\nexport default ProductForm\n","import React, { Component } from 'react'\nimport axios from 'axios'\n\n\n\nclass ProductList extends Component{\n    state={\n        products: []\n    }\n\n    componentDidMount(){\n        let url = \"https://prueba-aitai.herokuapp.com/product/all\"\n        axios.get(url,{withCredentials:false})\n        .then(p=>{\n            // console.log(\"aqui es \", p)\n        this.setState({products:[p.data]})\n        \n        })\n        .catch(e=>console.log(e))\n    }\n\n    render(){\n        const {products}= this.state\n        console.log(products[0])\n        if(products.length === 0) return<div>Loading...</div>\n        return(\n            <div className=\"product-container\"> \n                {products[0].map((product,index)=>{\n                    console.log(product)\n                    return(\n                        <div key={index} className=\"product-card\">\n                        <p>Product Name: <b>{product.name}</b></p>\n                        <p>Quantity: <b>{product.quantity}</b></p>\n                        </div>\n                    )\n                })}\n            </div>\n        )\n                } \n            }\n\nexport default ProductList\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport Index from './components/Index'\nimport ProductForm from './components/ProductForm'\nimport ProductList from './components/ProductAll';\n\n\nexport default ()=> <Switch>\n<Route exact path=\"/\" component={Index} />\n<Route path=\"/product/create\" component={ProductForm} />\n<Route path=\"/product/all\" component={ProductList} />\n\n\n\n </Switch>\n","import React, { Component } from 'react';\nimport {Link} from 'react-router-dom'\nimport './App.css';\nimport Routes from './Routes'\nimport { withRouter } from 'react-router-dom'\n\nclass App extends Component {\n  render() {\n    return (\n      <div >\n        <nav className=\"navbar\">\n        <Link to=\"/product/create\">\n          <span>\n          Make A New Product\n          </span>\n          </Link>\n\n          <Link to=\"/product/all\">\n            <span>\n            Look At All Products\n            </span>\n            </Link>\n        </nav>\n        <Routes />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nlet WithRouter = () => <BrowserRouter><App /></BrowserRouter>\n\nReactDOM.render(<WithRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}